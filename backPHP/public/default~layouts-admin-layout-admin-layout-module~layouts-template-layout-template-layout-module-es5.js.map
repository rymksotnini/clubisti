{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/esm2015/snack-bar.js"],"names":["SimpleSnackBar_div_2_Template","rf","ctx","_r1921","SimpleSnackBar_div_2_Template_button_click_1_listener","ctx_r1920","action","ctx_r1919","data","MatSnackBarContainer_ng_template_0_Template","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","duration","setTimeout","dispose","dismissedByAction","asObservable","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","ɵfac","SimpleSnackBar_Factory","t","ɵcmp","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","message","hasAction","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","run","detectChanges","onMicrotaskEmpty","pipe","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","_t","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","features","MatSnackBarContainer_Template","animation","propDecorators","static","Default","animations","MatSnackBarModule","ɵmod","ɵinj","factory","MatSnackBarModule_Factory","imports","ngJitMode","declarations","exports","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","component","config","_attach","_config","Object","assign","openFromComponent","_openedSnackBarRef","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","state$$1","overlayElement","className","matches","remove","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","parent","value","MatSnackBar_Factory","ɵprov","token","ngInjectableDef"],"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","file":"default~layouts-admin-layout-admin-layout-module~layouts-template-layout-template-layout-module-es5.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r1921 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r1921); const ctx_r1920 = ɵngcc0.ɵɵnextContext(); return ctx_r1920.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1919 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1919.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                }\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 2, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state$$1.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: MatSnackBar.ɵfac, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map"]}